




USE sql_20231030

DROP TABLE IF EXISTS employee;CREATE TABLE employee(  emp_id  VARCHAR(20)  ,emp_name VARCHAR(50)  ,salary INT  ,dept_id VARCHAR(20)  ,manager_id VARCHAR(20));INSERT INTO employeeVALUES('E1', 'Rahul', 15000, 'D1', 'M1'),('E2', 'Manoj', 15000, 'D1', 'M1'),('E3', 'Jamuna', 55000, 'D2', 'M2'),('E4', 'Madhusudhan', 25000, 'D2', 'M2'),('E5', 'Amit', 20000, 'D10', 'M3'),('E6', 'Robin', 35000, 'D10', 'M3');--- Create the Department TABLEDROP TABLE IF EXISTS department;CREATE TABLE department(  dept_id VARCHAR(20) PRIMARY KEY  ,dept_name VARCHAR(50) NOT NULL);INSERT INTO departmentVALUES('D1', 'IT'),('D2', 'HR'),('D3', 'Finance'),('D4', 'Admin');
DROP TABLE IF EXISTS manager;CREATE TABLE manager(  manager_id VARCHAR(20) PRIMARY KEY  ,manager_name VARCHAR(50) NOT NULL  ,dept_id VARCHAR(20));INSERT INTO managerVALUES('M1', 'Prem', 'D3'),('M2', 'Shripadh', 'D4'),('M3', 'Nick', 'D1'),('M4', 'Cory', 'D1');DROP TABLE IF EXISTS projects;CREATE TABLE projects(  project_id VARCHAR(20) NOT NULL  ,project_name VARCHAR(100) NOT NULL  ,team_member_id VARCHAR(20));INSERT INTO projectsVALUES('P1', 'Data Migration', 'E1'),('P1', 'Data Migration', 'E2'),('P1', 'Data Migration', 'M3'),('P2', 'ETL TOOL', 'E1'),('P2', 'ETL TOOL', 'M4');-- Get the list of all the employees, the departments where these employees work-- their manager infomartion and the project informationSELECT * FROM employee;SELECT * FROM department;SELECT * FROM projects;SELECT employee.emp_id,employee.emp_name AS employee_name,employee.salary,department.dept_name AS department_name,manager.manager_name,projects.project_nameFROMemployeeLEFT JOINdepartmentONemployee.dept_id = department.dept_idLEFT JOINmanagerONemployee.manager_id = manager.manager_idLEFT JOINprojectsONemployee.emp_id = projects.team_member_idORDER BY employee.salary DESC;--- Employee who are not assigned to a projectSELECT employee.emp_id,employee.emp_name AS employee_name,employee.salary,department.dept_name AS department_name,manager.manager_name,projects.project_nameFROMemployeeLEFT JOINdepartmentONemployee.dept_id = department.dept_idLEFT JOINmanagerONemployee.manager_id = manager.manager_idLEFT JOINprojectsONemployee.emp_id = projects.team_member_idWHERE project_name IS NULLORDER BY employee.salary DESC;-- SELF JOINDROP TABLE IF EXISTS family_tree;CREATE TABLE family_tree(  member_id VARCHAR(20) PRIMARY KEY  ,name VARCHAR(100) NOT NULL  ,age INT NOT NULL  ,parent_id VARCHAR(20));INSERT INTO family_treeVALUES('F1', 'David', 4, 'F5'),('F2', 'Carol', 10, 'F5'),('F3', 'Micheal', 12, 'F5'),('F4', 'Johnson', 36, NULL),('F5', 'Maryam', 40, 'F6'),('F6', 'Stewart', 70, NULL),('F7', 'Rohan', 6, 'F4'),('F8', 'Asha', 8, 'F4');SELECT child_info.name AS child_name,child_info.age AS child_age,parent_info.name AS parent_name,parent_info.age AS parent_ageFROMfamily_tree AS child_infoINNER JOINfamily_tree AS parent_infoONchild_info.parent_id = parent_info.member_idORDER BY parent_age ASC, child_age DESC-- GET THE list of children who are above 10 years old-- Order of execution -- column aliases and ORDER BY clause happens at the very end before the output is displayed on the-- screenSELECTchild_info.name AS child_name,child_info.age AS child_age --- the column aliases are for beautification,parent_info.name AS parent_name,parent_info.age AS parent_ageFROMfamily_tree AS child_infoINNER JOINfamily_tree AS parent_infoONchild_info.parent_id = parent_info.member_idWHERE child_info.age >= 10ORDER BY parent_age ASC, child_age DESC;---Record of all family members whose parent info is not availableSELECTchild_info.name AS child_name,child_info.age AS child_age --- the column aliases are for beautification,parent_info.name AS parent_name,parent_info.age AS parent_ageFROMfamily_tree AS child_infoLEFT JOINfamily_tree AS parent_infoONchild_info.parent_id = parent_info.member_idWHERE parent_info.name IS NULLORDER BY parent_age ASC, child_age DESC;-- Create table employeeDROP TABLE IF EXISTS employee;CREATE TABLE employee(    emp_id INT PRIMARY KEY IDENTITY(1,1)    ,emp_name VARCHAR(50) NOT NULL    ,dept_name VARCHAR(40) NOT NULL    ,salary INT);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Prakash'  ,'IT'  ,50000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Nithin'  ,'IT'  ,40000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Sumana'  ,'IT'  ,90000);
INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Kishor'  ,'IT'  ,32000);----INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Veena'  ,'Manugfacturing'  ,45987);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Govind'  ,'Hospitality'  ,45000);
INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Vijaya'  ,'Manugfacturing'  ,50000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Leena'  ,'IT'  ,76000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Prakash'  ,'IT'  ,34000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Mani'  ,'Manugfacturing'  ,77000);
INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Lina Joseph'  ,'Hospitality'  ,76000);INSERT INTO employee(  emp_name  ,dept_name  ,salary)VALUES(  'Prakash'  ,'Hospitality'  ,78000);SELECT * FROM employee;--Aggregate functionsSELECT MAX(salary) FROM employee;--- to get the minimum salary from the employeeSELECT MIN(salary) FROM employee;--- What is the average salary from the employeeSELECT AVG(salary) FROM employee;-- What is the SUM of all salaries from the employeeSELECT SUM(salary) FROM employee;--- what is the count of the employees in my companySELECT COUNT(*) FROM employee; --- total number of rows in the table employeeSELECT COUNT(emp_id) FROM employee; -- total number of NOT NULL emp_id in the table employee--- SELECT DISTINCT dept_name FROM employee ;--- What is the highest salary in Hospitality department?SELECT MAX(salary) FROM (SELECT * FROM employeeWHERE dept_name = 'Hospitality') AS hospSELECT MAX(salary) FROM employeeWHERE dept_name = 'Hospitality';-- What is total salary paid by the company to the entire IT department?	SELECT SUM(salary) FROM employee	WHERE dept_name = 'IT';--- FIND the max salary by departmentSELECT dept_name, MAX(salary) -- the group name and the aggregate function is shown in the outputFROMemployeeGROUP BY dept_name --- groups are created first--- Column 'employee.emp_name' is invalid in the select list--- because it is not contained in either an aggregate function or the GROUP BY clauseSELECT emp_name, MAX(salary) -- the group name and the aggregate function is shown in the outputFROMemployeeGROUP BY dept_name --- groups are created first--- get the minimum salary by department  and order by the min(salary)?SELECT dept_name, MIN(salary) AS min_salaryFROMemployeeGROUP BY dept_nameORDER BY min_salary--- get the minimum salary by department WHERE the min salary > 45000--- and order by the min(salary)?SELECT dept_name, MIN(salary) AS min_salaryFROMemployeeGROUP BY dept_nameHAVING  MIN(salary) > 45000 -- BECAUSE we are filtering on a derived column( Filtering on Aggregate column)ORDER BY min_salary;-- get the name of all the departments where the count is greater than or equal to 3SELECT dept_name FROM employeeGROUP BY  dept_nameHAVING COUNT(dept_name) >= 4;SELECT dept_name, COUNT(*) AS no_employees FROM employee GROUP BY dept_nameHAVING COUNT(*) >= 3-- Find all the employees in the company who get more than the average salary?SELECT AVG(salary) FROM employeeSELECT * FROM employee WHERE salary > -- outer query(SELECT AVG(salary) FROM employee);--- this is a scalar subquery, because this subquery is giving you a single value--- find all the employee who get more salary that the average salary in the Hospitality department?SELECT *FROMemployeeWHEREsalary >(SELECT AVG(salary) FROM employee WHERE dept_name = 'Hospitality')----I want to get the names of all the people who earn the highest salaries in their department?--- The subquery will return multiple rows and multiple columnsSELECT employee.emp_name, employee.dept_name, max_sal_dept.max_salaryFROMemployeeINNER JOIN(SELECT dept_name , MAX(salary) AS max_salaryFROMemployeeGROUP BY dept_name) AS max_sal_deptONemployee.dept_name = max_sal_dept.dept_nameANDemployee.salary = max_sal_dept.max_salarySELECT emp_name,dept_name, salary FROM employee WHERE salary in (SELECT MAX(salary) FROM employeeGROUP BY dept_name)INSERT INTO employee(emp_name,dept_name,salary)VALUES('Sindhu','IT',78000);DROP TABLE IF EXISTS department;CREATE TABLE department(    dept_id INT UNIQUE NOT NULL    ,dept_name VARCHAR(50) PRIMARY KEY    ,location VARCHAR(50));INSERT INTO employee(emp_name,dept_name,salary)VALUES('Pawan','IT',77000);DROP TABLE IF EXISTS department;CREATE TABLE department(    dept_id INT UNIQUE NOT NULL    ,dept_name VARCHAR(50) PRIMARY KEY    ,location VARCHAR(50));INSERT INTO departmentVALUES(1, 'Admin', 'Bangalore'),(2, 'HR', 'Bangalore'),(3, 'IT', 'Bangalore'),(4, 'Finance', 'Mumbai'),(5, 'Marketing', 'Bangalore'),(6, 'Sales', 'Mumbai');INSERT INTO departmentVALUES(7, 'Manugfacturing', 'Jamshedpur'),(8, 'Hospitality', 'Delhi');